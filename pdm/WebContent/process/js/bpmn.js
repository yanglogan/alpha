Schema.addCategory({
  name: "bpmn",
  text: "BPMN",
  dataAttributes: [{
    name: "名称",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "文档",
    type: "string",
    value: "",
    category: "default"
  },
  ]
});
Schema.addGlobalCommand("inneround", [{
  action: "move",
  x: "3",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "3",
  y1: "-h/6+4",
  x2: "w-3",
  y2: "-h/6+4",
  x: "w-3",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w-3",
  y1: "h+h/6-4",
  x2: "3",
  y2: "h+h/6-4",
  x: "3",
  y: "h*0.5"
}]);
Schema.addGlobalCommand("message0", [{
  action: "move",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.3",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
}]);
Schema.addGlobalCommand("timer0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5-w*0.3",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5-w*0.3",
  y1: "h*0.5-h*0.6*2/3",
  x2: "w*0.5+w*0.3",
  y2: "h*0.5-h*0.6*2/3",
  x: "w*0.5+w*0.3",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5+w*0.3",
  y1: "h*0.5+h*0.6*2/3",
  x2: "w*0.5-w*0.3",
  y2: "h*0.5+h*0.6*2/3",
  x: "w*0.5-w*0.3",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("timer0_needle", [{
  action: "move",
  x: "w*0.5+w*0.15",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/12*5)",
  y: "h*0.5-h*0.25*Math.sin(Math.PI/12*5)"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
}]);
Schema.addGlobalCommand("timer0_num", [{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(0)",
  y: "h*0.5+h*0.3*Math.sin(0)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(0)",
  y: "h*0.5+h*0.25*Math.sin(0)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*2)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*2)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*2)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*2)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*3)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*3)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*3)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*3)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*4)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*4)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*4)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*4)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*5)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*5)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*5)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*5)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*6)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*6)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*6)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*6)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*7)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*7)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*7)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*7)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*8)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*8)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*8)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*8)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*9)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*9)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*9)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*9)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*10)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*10)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*10)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*10)"
},
{
  action: "move",
  x: "w*0.5+w*0.3*Math.cos(Math.PI/6*11)",
  y: "h*0.5+h*0.3*Math.sin(Math.PI/6*11)"
},
{
  action: "line",
  x: "w*0.5+w*0.25*Math.cos(Math.PI/6*11)",
  y: "h*0.5+h*0.25*Math.sin(Math.PI/6*11)"
}]);
Schema.addGlobalCommand("conditional0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5-w*0.25",
  y: "h*0.5-h*0.25"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5-h*0.25"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.25",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.25",
  y: "h*0.5-h*0.25"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5-w*0.2",
  y: "h*0.5-h*0.05"
},
{
  action: "line",
  x: "w*0.5+w*0.2",
  y: "h*0.5-h*0.05"
},
{
  action: "move",
  x: "w*0.5-w*0.2",
  y: "h*0.5-h*0.16"
},
{
  action: "line",
  x: "w*0.5+w*0.2",
  y: "h*0.5-h*0.16"
},
{
  action: "move",
  x: "w*0.5-w*0.2",
  y: "h*0.5+h*0.05"
},
{
  action: "line",
  x: "w*0.5+w*0.2",
  y: "h*0.5+h*0.05"
},
{
  action: "move",
  x: "w*0.5-w*0.2",
  y: "h*0.5+h*0.16"
},
{
  action: "line",
  x: "w*0.5+w*0.2",
  y: "h*0.5+h*0.16"
}]);
Schema.addGlobalCommand("escalation0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.2",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.2",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("signal0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5-h*0.32"
},
{
  action: "line",
  x: "w*0.5+w*0.28",
  y: "h*0.5+h*0.15"
},
{
  action: "line",
  x: "w*0.5-w*0.28",
  y: "h*0.5+h*0.15"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h*0.32"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("compensation0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5-w*0.25",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.25",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("error0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5+w*0.1",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.28",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.1",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.1",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5-w*0.28",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.1",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.1",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("multiple0", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5-h*0.28"
},
{
  action: "line",
  x: "w*0.5+w*0.28",
  y: "h*0.5-h*0.08"
},
{
  action: "line",
  x: "w*0.5+w*0.17",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.17",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.28",
  y: "h*0.5-h*0.08"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h*0.28"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("parallel0", [{
  action: "move",
  x: "w*0.5+w*0.07",
  y: "h*0.5-h*0.07"
},
{
  action: "line",
  x: "w*0.5+w*0.27",
  y: "h*0.5-h*0.07"
},
{
  action: "line",
  x: "w*0.5+w*0.27",
  y: "h*0.5+h*0.07"
},
{
  action: "line",
  x: "w*0.5+w*0.07",
  y: "h*0.5+h*0.07"
},
{
  action: "line",
  x: "w*0.5+w*0.07",
  y: "h*0.5+h*0.27"
},
{
  action: "line",
  x: "w*0.5-w*0.07",
  y: "h*0.5+h*0.27"
},
{
  action: "line",
  x: "w*0.5-w*0.07",
  y: "h*0.5+h*0.07"
},
{
  action: "line",
  x: "w*0.5-w*0.27",
  y: "h*0.5+h*0.07"
},
{
  action: "line",
  x: "w*0.5-w*0.27",
  y: "h*0.5-h*0.07"
},
{
  action: "line",
  x: "w*0.5-w*0.07",
  y: "h*0.5-h*0.07"
},
{
  action: "line",
  x: "w*0.5-w*0.07",
  y: "h*0.5-h*0.27"
},
{
  action: "line",
  x: "w*0.5+w*0.07",
  y: "h*0.5-h*0.27"
},
{
  action: "line",
  x: "w*0.5+w*0.07",
  y: "h*0.5-h*0.07"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("gateway0", [{
  action: "move",
  x: "0",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5",
  y: "0"
},
{
  action: "line",
  x: "w",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5",
  y: "h"
},
{
  action: "line",
  x: "0",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("link3", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5-w*0.26",
  y: "h*0.5-h*0.08"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5-h*0.08"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5-h*0.18"
},
{
  action: "line",
  x: "w*0.5+w*0.26",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5+h*0.18"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5+h*0.08"
},
{
  action: "line",
  x: "w*0.5-w*0.26",
  y: "h*0.5+h*0.08"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("cancel3", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5",
  y: "h*0.5-h*0.1"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5-h*0.25"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5-h*0.16"
},
{
  action: "line",
  x: "w*0.5+w*0.1",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.25",
  y: "h*0.5+h*0.16"
},
{
  action: "line",
  x: "w*0.5+w*0.16",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5+h*0.1"
},
{
  action: "line",
  x: "w*0.5-w*0.16",
  y: "h*0.5+h*0.25"
},
{
  action: "line",
  x: "w*0.5-w*0.25",
  y: "h*0.5+h*0.16"
},
{
  action: "line",
  x: "w*0.5-w*0.1",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5-w*0.25",
  y: "h*0.5-h*0.16"
},
{
  action: "line",
  x: "w*0.5-w*0.16",
  y: "h*0.5-h*0.25"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h*0.1"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("message4", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.3",
  y: "h*0.5+h*0.2"
},
{
  action: "line",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("message4_0", [{
  action: "move",
  x: "w*0.5-w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "line",
  x: "w*0.5+w*0.3",
  y: "h*0.5-h*0.2"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("g_round", [{
  action: "move",
  x: "w*0.5 - w*0.25",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 - w*0.25",
  y1: "h*0.5 - h*2/3*0.5",
  x2: "w*0.5 + w*0.25",
  y2: "h*0.5 - h*2/3*0.5",
  x: "w*0.5 + w*0.25",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 + w*0.25",
  y1: "h*0.5 + h*2/3*0.5",
  x2: "w*0.5 - w*0.25",
  y2: "h*0.5 + h*2/3*0.5",
  x: "w*0.5 - w*0.25",
  y: "h*0.5"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("manual_task", [{
  action: "move",
  x: "100*0.15- 100*0.08",
  y: "60*0.2"
},
{
  action: "line",
  x: "100*0.15- 100*0.04",
  y: "60*0.2"
},
{
  action: "line",
  x: "100*0.15+ 100*0.01",
  y: "60*0.13"
},
{
  action: "line",
  x: "100*0.15+ 100*0.04",
  y: "60*0.13"
},
{
  action: "line",
  x: "100*0.15 + 100*0.04",
  y: "60*0.17"
},
{
  action: "line",
  x: "100*0.15+ 100*0.01",
  y: "60*0.17"
},
{
  action: "line",
  x: "100*0.15+ 100*0.1",
  y: "60*0.17"
},
{
  action: "line",
  x: "100*0.15+ 100*0.1",
  y: "60*0.21"
},
{
  action: "line",
  x: "100*0.15+ 100*0.01",
  y: "60*0.21"
},
{
  action: "line",
  x: "100*0.15+ 100*0.06",
  y: "60*0.21"
},
{
  action: "line",
  x: "100*0.15+ 100*0.06",
  y: "60*0.25"
},
{
  action: "line",
  x: "100*0.15+ 100*0.01",
  y: "60*0.25"
},
{
  action: "line",
  x: "100*0.15+ 100*0.06",
  y: "60*0.25"
},
{
  action: "line",
  x: "100*0.15+ 100*0.06",
  y: "60*0.29"
},
{
  action: "line",
  x: "100*0.15+ 100*0.06",
  y: "60*0.29"
},
{
  action: "line",
  x: "100*0.15+ 100*0.04",
  y: "60*0.29"
},
{
  action: "line",
  x: "100*0.15+ 100*0.04",
  y: "60*0.33"
},
{
  action: "line",
  x: "100*0.15- 100*0.04",
  y: "60*0.33"
},
{
  action: "line",
  x: "100*0.15- 100*0.08",
  y: "60*0.28"
},
{
  action: "line",
  x: "100*0.15- 100*0.08",
  y: "60*0.2"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("receive_task", [{
  action: "move",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15- 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.08"
},
{
  action: "line",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24 + 60*0.08"
},
{
  action: "line",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "close"
},
{
  action: "line",
  x: "100*0.15 - 0",
  y: "60*0.24- 60*0.01"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 0",
  y: "60*0.24- 60*0.01"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("receive_task_dark", [{
  action: "move",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15- 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.08"
},
{
  action: "line",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24 + 60*0.08"
},
{
  action: "line",
  x: "100*0.15+ 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "close"
},
{
  action: "line",
  x: "100*0.15 - 0",
  y: "60*0.24- 60*0.01"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 0",
  y: "60*0.24- 60*0.01"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("service_task", [{
  action: "move",
  x: "100*0.09 -100*0.26 *0.16",
  y: "60*0.14 + 60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.28 *0.16",
  y: "60*0.14 + 60/5*8 *0.11 *0.16"
},
{
  action: "line",
  x: "100*0.09 - 100*0.26 *0.16",
  y: "60*0.14 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.17 *0.16",
  y: "60*0.14 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.12 *0.16",
  y: "60*0.14 -60/5*8 *0.02 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.21 *0.16",
  y: "60*0.14 -60/5*8 *0.13 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.18 *0.16",
  y: "60*0.14 -60/5*8 *0.17 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.13 *0.16",
  y: "60*0.14 -60/5*8 *0.19 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.05 *0.16",
  y: "60*0.14 -60/5*8 *0.11 *0.16"
},
{
  action: "line",
  x: "100*0.09 +100*0.03 *0.16",
  y: "60*0.14 -60/5*8 *0.15 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.04 *0.16",
  y: "60*0.14 -60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.10 *0.16",
  y: "60*0.14 -60/5*8 *0.27 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.15 *0.16",
  y: "60*0.14 -60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.15 *0.16",
  y: "60*0.14 -60/5*8 *0.15 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.23 *0.16",
  y: "60*0.14 -60/5*8 *0.12 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.30 *0.16",
  y: "60*0.14 -60/5*8 *0.19 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.35 *0.16",
  y: "60*0.14 -60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.38 *0.16",
  y: "60*0.14 -60/5*8 *0.12 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.32 *0.16",
  y: "60*0.14 -60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.37 *0.16",
  y: "60*0.14 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.46 *0.16",
  y: "60*0.14 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.48 *0.16",
  y: "60*0.14 + 60/5*8 *0.10 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.46 *0.16",
  y: "60*0.14 + 60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.37 *0.16",
  y: "60*0.14 + 60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.33 *0.16",
  y: "60*0.14 + 60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.38 *0.16",
  y: "60*0.14 + 60/5*8 *0.31 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.36 *0.16",
  y: "60*0.14 + 60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.29 *0.16",
  y: "60*0.14 + 60/5*8 *0.39 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.25 *0.16",
  y: "60*0.14 + 60/5*8 *0.35 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.16 *0.16",
  y: "60*0.14 + 60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.16 *0.16",
  y: "60*0.14 + 60/5*8 *0.46 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.10 *0.16",
  y: "60*0.14 + 60/5*8 *0.48 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.04 *0.16",
  y: "60*0.14 + 60/5*8 *0.46 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.04 *0.16",
  y: "60*0.14 + 60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.04 *0.16",
  y: "60*0.14 + 60/5*8 *0.33 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.12 *0.16",
  y: "60*0.14 + 60/5*8 *0.38 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.18 *0.16",
  y: "60*0.14 + 60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.21 *0.16",
  y: "60*0.14 + 60/5*8 *0.33 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.14 *0.16",
  y: "60*0.14 + 60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.16 *0.16",
  y: "60*0.14 + 60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.26 *0.16",
  y: "60*0.14 + 60/5*8 *0.16 *0.16"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.09 -100*0.01 *0.16",
  y: "60*0.14 +  60/5*8 *0.01 *0.16"
},
{
  action: "line",
  x: "100*0.09 +100*0.01 *0.16",
  y: "60*0.14 - 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 +100*0.04 *0.16",
  y: "60*0.14 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.08 *0.16",
  y: "60*0.14 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.08 *0.16",
  y: "60*0.14 - 60*0.03 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.12 *0.16",
  y: "60*0.14 - 60*0.03 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.12 *0.16",
  y: "60*0.14 - 60*0.0 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.15 *0.16",
  y: "60*0.14 + 60*0.02 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.18 *0.16",
  y: "60*0.14 -60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.22 *0.16",
  y: "60*0.14 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.18 *0.16",
  y: "60*0.14 + 60*0.04 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.20 *0.16",
  y: "60*0.14 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.25 *0.16",
  y: "60*0.14 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.25 *0.16",
  y: "60*0.14 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.20 *0.16",
  y: "60*0.14 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.18 *0.16",
  y: "60*0.14 + 60*0.16 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.21 *0.16",
  y: "60*0.14 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.18 *0.16",
  y: "60*0.14 + 60*0.22 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.15 *0.16",
  y: "60*0.14 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.12 *0.16",
  y: "60*0.14 + 60*0.21 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.12 *0.16",
  y: "60*0.14 + 60*0.25 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.08 *0.16",
  y: "60*0.14 + 60*0.26 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.08 *0.16",
  y: "60*0.14 + 60*0.21 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.05 *0.16",
  y: "60*0.14 + 60*0.18 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.01 *0.16",
  y: "60*0.14 + 60*0.22 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 - 100*0.02 *0.16",
  y: "60*0.14 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.0 *0.16",
  y: "60*0.14 + 60*0.16 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.0 *0.16",
  y: "60*0.14 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.04 *0.16",
  y: "60*0.14 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.04 *0.16",
  y: "60*0.14 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0. *0.16",
  y: "60*0.14 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 + 100*0.01 *0.16",
  y: "60*0.14 + 60*0.05 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.09 -100*0.01 *0.16",
  y: "60*0.14 + 60*0.01 /5*8 *0.16"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.15 -100*0.26 *0.16",
  y: "60*0.24 + 60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.28 *0.16",
  y: "60*0.24 + 60/5*8 *0.11 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.26 *0.16",
  y: "60*0.24 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.17 *0.16",
  y: "60*0.24 + 60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.12 *0.16",
  y: "60*0.24 -60/5*8 *0.02 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.21 *0.16",
  y: "60*0.24 -60/5*8 *0.13 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.18 *0.16",
  y: "60*0.24 -60/5*8 *0.17 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.13 *0.16",
  y: "60*0.24 -60/5*8 *0.19 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.05 *0.16",
  y: "60*0.24 -60/5*8 *0.11 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.03 *0.16",
  y: "60*0.24 -60/5*8 *0.15 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.04 *0.16",
  y: "60*0.24 -60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.10 *0.16",
  y: "60*0.24 -60/5*8 *0.27 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.15 *0.16",
  y: "60*0.24 -60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.15 *0.16",
  y: "60*0.24 -60/5*8 *0.15 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.23 *0.16",
  y: "60*0.24 -60/5*8 *0.12 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.30 *0.16",
  y: "60*0.24 -60/5*8 *0.19 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.35 *0.16",
  y: "60*0.24 -60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.38 *0.16",
  y: "60*0.24 -60/5*8 *0.12 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.32 *0.16",
  y: "60*0.24 -60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.37 *0.16",
  y: "60*0.24 +60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.46 *0.16",
  y: "60*0.24 +60/5*8 *0.05 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.48 *0.16",
  y: "60*0.24 +60/5*8 *0.10 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.46 *0.16",
  y: "60*0.24 +60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.37 *0.16",
  y: "60*0.24 +60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.15 +  100*0.33 *0.16",
  y: "60*0.24 +60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.38 *0.16",
  y: "60*0.24 +60/5*8 *0.31 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.36 *0.16",
  y: "60*0.24 +60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.29 *0.16",
  y: "60*0.24 +60/5*8 *0.39 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.25 *0.16",
  y: "60*0.24 +60/5*8 *0.35 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.16 *0.16",
  y: "60*0.24 +60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.16 *0.16",
  y: "60*0.24 +60/5*8 *0.46 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.10 *0.16",
  y: "60*0.24 +60/5*8 *0.48 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.04 *0.16",
  y: "60*0.24 +60/5*8 *0.46 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.04 *0.16",
  y: "60*0.24 +60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.04 *0.16",
  y: "60*0.24 +60/5*8 *0.33 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.12 *0.16",
  y: "60*0.24 +60/5*8 *0.38 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.18 *0.16",
  y: "60*0.24 +60/5*8 *0.37 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.21 *0.16",
  y: "60*0.24 +60/5*8 *0.33 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.14 *0.16",
  y: "60*0.24 +60/5*8 *0.25 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.16 *0.16",
  y: "60*0.24 +60/5*8 *0.16 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.26 *0.16",
  y: "60*0.24 +60/5*8 *0.16 *0.16"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.15 -100*0.01 *0.16",
  y: "60*0.24 +60/5*8 *0.01 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.01 *0.16",
  y: "60*0.24 - 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.04 *0.16",
  y: "60*0.24 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08 *0.16",
  y: "60*0.24 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08 *0.16",
  y: "60*0.24 - 60*0.03 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.12 *0.16",
  y: "60*0.24 - 60*0.03 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.12 *0.16",
  y: "60*0.24 - 60*0.0 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.15 *0.16",
  y: "60*0.24 + 60*0.02 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.18 *0.16",
  y: "60*0.24 -60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.22 *0.16",
  y: "60*0.24 + 60*0.01 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.18 *0.16",
  y: "60*0.24 + 60*0.04 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.20 *0.16",
  y: "60*0.24 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.25 *0.16",
  y: "60*0.24 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.25 *0.16",
  y: "60*0.24 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.20 *0.16",
  y: "60*0.24 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.18 *0.16",
  y: "60*0.24 + 60*0.16 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.21 *0.16",
  y: "60*0.24 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.18 *0.16",
  y: "60*0.24 + 60*0.22 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.15 *0.16",
  y: "60*0.24 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.12 *0.16",
  y: "60*0.24 + 60*0.21 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.12 *0.16",
  y: "60*0.24 + 60*0.25 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08 *0.16",
  y: "60*0.24 + 60*0.26 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08 *0.16",
  y: "60*0.24 + 60*0.21 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.05 *0.16",
  y: "60*0.24 + 60*0.18 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.01 *0.16",
  y: "60*0.24 + 60*0.22 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 - 100*0.02 *0.16",
  y: "60*0.24 + 60*0.19 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.0 *0.16",
  y: "60*0.24 + 60*0.16 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.0 *0.16",
  y: "60*0.24 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.04 *0.16",
  y: "60*0.24 + 60*0.12 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.04 *0.16",
  y: "60*0.24 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0 *0.16",
  y: "60*0.24 + 60*0.08 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 + 100*0.01 *0.16",
  y: "60*0.24 + 60*0.05 /5*8 *0.16"
},
{
  action: "line",
  x: "100*0.15 -100*0.01 *0.16",
  y: "60*0.24 + 60*0.01 /5*8 *0.16"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("script_task", [{
  action: "move",
  x: "100*0.15- 100*0.05",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 + 100*0.05",
  y: "60*0.24 - 60*0.1"
},
{
  action: "curve",
  x1: "100*0.15 + 100*0.02",
  y1: "60*0.24 - 60*0.1",
  x2: "100*0.15 + 100*0.02",
  y2: "60*0.24",
  x: "100*0.15 + 100*0.04",
  y: "60*0.24"
},
{
  action: "curve",
  x1: "100*0.15 + 100*0.06",
  y1: "60*0.24",
  x2: "100*0.15 + 100*0.06",
  y2: "60*0.24 + 60*0.1",
  x: "100*0.15 + 100*0.03",
  y: "60*0.24 + 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.1"
},
{
  action: "curve",
  x1: "100*0.15 - 100*0.05",
  y1: "60*0.24 + 60*0.1",
  x2: "100*0.15 - 100*0.05",
  y2: "60*0.24",
  x: "100*0.15 - 100*0.07",
  y: "60*0.24"
},
{
  action: "curve",
  x1: "100*0.15 - 100*0.09",
  y1: "60*0.24",
  x2: "100*0.15 - 100*0.09",
  y2: "60*0.24 - 60*0.1",
  x: "100*0.15 - 100*0.05",
  y: "60*0.24 - 60*0.1"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 - 60*0.05"
},
{
  action: "line",
  x: "100*0.15 + 100*0.025",
  y: "60*0.24 - 60*0.05"
},
{
  action: "move",
  x: "100*0.15 - 100*0.07",
  y: "60*0.24 - 0"
},
{
  action: "line",
  x: "100*0.15 + 100*0.04",
  y: "60*0.24 - 0"
},
{
  action: "move",
  x: "100*0.15 - 100*0.055",
  y: "60*0.24 + 60*0.06"
},
{
  action: "line",
  x: "100*0.15 + 100*0.05",
  y: "60*0.24 + 60*0.06"
}]);
Schema.addGlobalCommand("business_rule", [{
  action: "move",
  x: "100*0.15- 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08",
  y: "60*0.24- 60*0.1"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08",
  y: "60*0.24 + 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.1"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 - 60*0.05"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08",
  y: "60*0.24 - 60*0.05"
},
{
  action: "move",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.0"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08",
  y: "60*0.24 + 60*0.0"
},
{
  action: "move",
  x: "100*0.15 - 100*0.08",
  y: "60*0.24 + 60*0.05"
},
{
  action: "line",
  x: "100*0.15 + 100*0.08",
  y: "60*0.24 + 60*0.05"
},
{
  action: "move",
  x: "100*0.15 - 100*0.04",
  y: "60*0.24 - 60*0.1"
},
{
  action: "line",
  x: "100*0.15 - 100*0.04",
  y: "60*0.24 + 60*0.1"
}]);
Schema.addGlobalCommand("user_task", [{
  action: "move",
  x: "100*0.05+ 100/11*2*0.5-100/11*2*0.2",
  y: "60*0.1+ 60/55*16*0.3"
},
{
  action: "curve",
  x1: "100*0.05+ 100/11*2*0.30",
  y1: "60*0.1+ 60/55*16*0.3 - 60/55*16*0.4*2/3",
  x2: "100*0.05+ 100/11*2*0.5+100/11*2*0.2",
  y2: "60*0.1+ 60/55*16*0.3 - 60/55*16*0.4*2/3",
  x: "100*0.05+ 100/11*2*0.5+100/11*2*0.2",
  y: "60*0.1+ 60/55*16*0.3"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.5-100/11*2*0.2",
  y: "60*0.1+ 60/55*16*0.3"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.68"
},
{
  action: "quadraticCurve",
  x1: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.1",
  y1: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"
},
{
  action: "quadraticCurve",
  x1: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95",
  y1: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.68"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.95",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.77"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.77",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.77"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.23",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.05",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.96"
},
{
  action: "close"
},
{
  action: "move",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.38",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.42"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.40"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.32",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.35"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.32",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.27"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.43",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.27"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.46",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.24"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.68",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.24"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.68",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.35"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.40"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.62",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.42"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.60",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.58"
},
{
  action: "line",
  x: "100*0.05+ 100/11*2*0.0 + 100/11*2*0.35",
  y: "60*0.1+ 60/55*16*0.0 + 60/55*16*0.45"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("inner_roundRectangle", [{
  action: "move",
  x: "w * 0 +3",
  y: "h * 0 + h/30 +3"
},
{
  action: "quadraticCurve",
  x1: "w * 0 +3 +1",
  y1: "h * 0 +3 +1",
  x: "w * 0 + h/30 +3",
  y: "h * 0  +3"
},
{
  action: "line",
  x: "w * 1 - h/30 -3",
  y: "h * 0 +3"
},
{
  action: "quadraticCurve",
  x1: "w * 1 -3",
  y1: "h * 0+3",
  x: "w * 1  -3",
  y: "h * 0 + h/30 +3"
},
{
  action: "line",
  x: "w * 1 -3",
  y: "h * 1 - h/30-3"
},
{
  action: "quadraticCurve",
  x1: "w * 1 -3",
  y1: "h * 1 -3",
  x: "w * 1 - h/30-3",
  y: "h * 1 -3"
},
{
  action: "line",
  x: "w * 0 + h/30 +3",
  y: "h * 1 -3"
},
{
  action: "quadraticCurve",
  x1: "w * 0+3",
  y1: "h * 1-3",
  x: "w * 0 +3",
  y: "h * 1 - h/30 -3"
},
{
  action: "line",
  x: "w * 0 + 3",
  y: "h * 0 + h/30+3"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("exclusive_gateway", [{
  action: "move",
  x: "w*0.5",
  y: "h*0.5"
},
{
  action: "move",
  x: "w*0.5 - w*0.5*0.4 + w*0.02",
  y: "h*0.5 - h*0.5*0.4 - h*0.02"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.4 + w*0.02",
  y: "h*0.5 + h*0.5*0.4 - h*0.02"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.4 - w*0.02",
  y: "h*0.5 + h*0.5*0.4 + h*0.02"
},
{
  action: "line",
  x: "w*0.5 - w*0.5*0.4 - w*0.02",
  y: "h*0.5 - h*0.5*0.4 + h*0.02"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5 + w*0.5*0.4 - w*0.02",
  y: "h*0.5 - h*0.5*0.4 - h*0.02"
},
{
  action: "line",
  x: "w*0.5 - w*0.5*0.4 - w*0.02",
  y: "h*0.5 + h*0.5*0.4 - h*0.02"
},
{
  action: "line",
  x: "w*0.5 - w*0.5*0.4 + w*0.02",
  y: "h*0.5 + h*0.5*0.4 + h*0.02"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.4 + w*0.02",
  y: "h*0.5 - h*0.5*0.4 + h*0.02"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.4 - w*0.02",
  y: "h*0.5 - h*0.5*0.4 - h*0.02"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("complex_gateway0", [{
  action: "move",
  x: "w*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02",
  y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02",
  y: "h*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.03"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02",
  y: "h*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02",
  y: "h*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("complex_gateway1", [{
  action: "move",
  x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02",
  y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02",
  y: "h*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02",
  y: "h*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02",
  y: "h*0.5 - Math.min(w,h)*0.5*0.3 + Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02",
  y: "h*0.5 - Math.min(w,h)*0.5*0.3 - Math.min(w,h)*0.02"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("complex_gateway2", [{
  action: "move",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("complex_gateway3", [{
  action: "move",
  x: "w*0.5 - Math.min(w,h)*0.5*0.4",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.4",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.4",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.4",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.4",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("event_based_gateway", [{
  action: "move",
  x: "w*0.5 - w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 - w*0.5/55*32",
  y1: "h*0.5 - h/55*32*2/3",
  x2: "w*0.5 + w*0.5/55*32",
  y2: "h*0.5 - h/55*32*2/3",
  x: "w*0.5 + w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 + w*0.5/55*32",
  y1: "h*0.5 + h/55*32*2/3",
  x2: "w*0.5 - w*0.5/55*32",
  y2: "h*0.5 + h/55*32*2/3",
  x: "w*0.5 - w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5 - w*0.4/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 - w*0.4/55*32",
  y1: "h*0.5 - h/55*32*2/3*0.8",
  x2: "w*0.5+w*0.4/55*32",
  y2: "h*0.5 - h/55*32*2/3*0.8",
  x: "w*0.5 + w*0.4/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 + w*0.4/55*32",
  y1: "h*0.5 + h/55*32*2/3*0.8",
  x2: "w*0.5 - w*0.4/55*32",
  y2: "h*0.5 + h/55*32*2/3*0.8",
  x: "w*0.5 - w*0.4/55*32",
  y: "h*0.5"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5",
  y: "h*0.5 - h/55*32*0.28"
},
{
  action: "line",
  x: "w*0.5+ w/55*32*0.28",
  y: "h*0.5- h/55*32*0.08"
},
{
  action: "line",
  x: "w*0.5+ w/55*32*0.17",
  y: "h*0.5+h/55*32*0.25"
},
{
  action: "line",
  x: "w*0.5- w/55*32*0.17",
  y: "h*0.5+ h/55*32*0.25"
},
{
  action: "line",
  x: "w*0.5- w/55*32*0.28",
  y: "h*0.5-h/55*32*0.08"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h/55*32*0.28"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("event_based_start_gateway", [{
  action: "move",
  x: "w*0.5 - w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 - w*0.5/55*32",
  y1: "h*0.5 - h/55*32*2/3",
  x2: "w*0.5 + w*0.5/55*32",
  y2: "h*0.5 - h/55*32*2/3",
  x: "w*0.5 + w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "curve",
  x1: "w*0.5 + w*0.5/55*32",
  y1: "h*0.5 + h/55*32*2/3",
  x2: "w*0.5 - w*0.5/55*32",
  y2: "h*0.5 + h/55*32*2/3",
  x: "w*0.5 - w*0.5/55*32",
  y: "h*0.5"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5",
  y: "h*0.5 - h/55*32*0.28"
},
{
  action: "line",
  x: "w*0.5+ w/55*32*0.28",
  y: "h*0.5- h/55*32*0.08"
},
{
  action: "line",
  x: "w*0.5+ w/55*32*0.17",
  y: "h*0.5+h/55*32*0.25"
},
{
  action: "line",
  x: "w*0.5- w/55*32*0.17",
  y: "h*0.5+ h/55*32*0.25"
},
{
  action: "line",
  x: "w*0.5- w/55*32*0.28",
  y: "h*0.5-h/55*32*0.08"
},
{
  action: "line",
  x: "w*0.5",
  y: "h*0.5-h/55*32*0.28"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("parallel_gateway", [{
  action: "move",
  x: "w*0.5 - Math.min(w,h)*0.04",
  y: "h*0.5 - h*0.5*0.5"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.04",
  y: "h*0.5 + h*0.5*0.5"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.04",
  y: "h*0.5 + h*0.5*0.5"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.04",
  y: "h*0.5 - h*0.5*0.5"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.04",
  y: "h*0.5 - h*0.5*0.5"
},
{
  action: "close"
},
{
  action: "move",
  x: "w*0.5 - w*0.5*0.5",
  y: "h*0.5 - Math.min(w,h)*0.04"
},
{
  action: "line",
  x: "w*0.5 - w*0.5*0.5",
  y: "h*0.5 + Math.min(w,h)*0.04"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.5",
  y: "h*0.5 + Math.min(w,h)*0.04"
},
{
  action: "line",
  x: "w*0.5 + w*0.5*0.5",
  y: "h*0.5 - Math.min(w,h)*0.04"
},
{
  action: "line",
  x: "w*0.5 - w*0.5*0.5",
  y: "h*0.5 - Math.min(w,h)*0.04"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("parallel_eventbased_gateway", [{
  action: "move",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.02"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.4",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.5*0.4",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.4",
  y: "h*0.5 + Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.5*0.4",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.027"
},
{
  action: "line",
  x: "w*0.5 + Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "line",
  x: "w*0.5 - Math.min(w,h)*0.027",
  y: "h*0.5 - Math.min(w,h)*0.5*0.4"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("data_in_object", [{
  action: "move",
  x: "w/3/4",
  y: "h/4/3+3"
},
{
  action: "line",
  x: "w/3/4*3.5",
  y: "h/4/3+3"
},
{
  action: "line",
  x: "w/3/4*3.5",
  y: "h/4/3-h/4/5+3"
},
{
  action: "line",
  x: "w/3/4*5",
  y: "h/4/2+3"
},
{
  action: "line",
  x: "w/3/4*3.5",
  y: "h/4/2+h/4/2-h/4/3+h/4/5+3"
},
{
  action: "line",
  x: "w/3/4*3.5",
  y: "h/4/2+h/4/2-h/4/3+3"
},
{
  action: "line",
  x: "w/3/4",
  y: "h/4/2+h/4/2-h/4/3+3"
},
{
  action: "line",
  x: "w/3/4",
  y: "h/4/3+3"
},
{
  action: "close"
}]);
Schema.addGlobalCommand("choreography_task", [{
  action: "move",
  x: "0",
  y: "6"
},
{
  action: "quadraticCurve",
  x1: "0",
  y1: "0",
  x: "6",
  y: "0"
},
{
  action: "line",
  x: "w-6",
  y: "0"
},
{
  action: "quadraticCurve",
  x1: "w",
  y1: "0",
  x: "w",
  y: "6"
},
{
  action: "line",
  x: "w",
  y: "h-6"
},
{
  action: "quadraticCurve",
  x1: "w",
  y1: "h",
  x: "w-6",
  y: "h"
},
{
  action: "line",
  x: "6",
  y: "h"
},
{
  action: "quadraticCurve",
  x1: "0",
  y1: "h",
  x: "0",
  y: "h-6"
},
{
  action: "line",
  x: "0",
  y: "6"
},
{
  action: "close"
}]);
Schema.addShape({
  name: "startEvent",
  title: "开始事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "intermediateEvent",
  title: "中间事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  }]
});
Schema.addShape({
  name: "boundaryEvent",
  title: "绑定事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  }]
});
Schema.addShape({
  name: "endEvent",
  title: "结束事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "task",
  title: "任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "callActivity",
  title: "活动",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "回调对象",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "subProcess",
  title: "子流程",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "开始令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "结束令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    container: true,
    markers: ["expand"]
  },
  props: {
    w: 100,
    h: 70
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "bpmnGateway",
  title: "网关",
  text: "",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "dataObject",
  title: "数据对象",
  text: "",
  category: "bpmn",
  groupName: "dataObject",
  dataAttributes: [{
    name: "是否为集合",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "主题引用项",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 70,
    h: 90
  },
  path: [{
    actions: [{
      action: "move",
      x: "0",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "0"
    },
    {
      action: "close"
    }]
  },
  {
    actions: [{
      action: "move",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    }]
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "rectangle"
    }
  }]
});
Schema.addShape({
  name: "textAnnotation",
  title: "注释",
  text: "",
  category: "bpmn",
  dataAttributes: [{
    name: "文本",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  anchors: [{
    x: "0",
    y: "h*0.5"
  },
  {
    x: "0",
    y: "h*0.5"
  },
  {
    x: "0",
    y: "h*0.5"
  },
  {
    x: "0",
    y: "h*0.5"
  }],
  path: [{
    fillStyle: {
      type: "none"
    },
    lineStyle: {
      lineWidth: 0
    },
    actions: {
      ref: "rectangle"
    }
  },
  {
    fillStyle: {
      type: "none"
    },
    actions: [{
      action: "move",
      x: "w/6",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "h"
    },
    {
      action: "line",
      x: "w/6",
      y: "h"
    }]
  },
  {
    fillStyle: {
      type: "none"
    },
    lineStyle: {
      lineWidth: 0
    },
    actions: {
      ref: "rectangle"
    }
  }]
});
Schema.addShape({
  name: "group",
  title: "组",
  text: "",
  category: "bpmn",
  props: {
    w: 200,
    h: 140
  },
  lineStyle: {
    lineWidth: 2,
    lineStyle: "dashed"
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "dataStore",
  title: "数据存储",
  text: "",
  category: "bpmn",
  props: {
    w: 70,
    h: 70
  },
  textBlock: {
    x: "0",
    y: "h/3",
    w: "w",
    h: "h*2/3"
  },
  path: [{
    actions: [{
      action: "move",
      x: "0",
      y: "h*0.14"
    },
    {
      action: "curve",
      x1: "0",
      y1: "-h*0.04",
      x2: "w",
      y2: "-h*0.04",
      x: "w",
      y: "h*0.14"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.86"
    },
    {
      action: "curve",
      x1: "w",
      y1: "h*1.04",
      x2: "0",
      y2: "h*1.04",
      x: "0",
      y: "h*0.86"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.14"
    },
    {
      action: "close"
    }]
  },
  {
    actions: [{
      action: "move",
      x: "w",
      y: "h*0.14"
    },
    {
      action: "curve",
      x1: "w",
      y1: "h*0.3",
      x2: "0",
      y2: "h*0.3",
      x: "0",
      y: "h*0.14"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.20"
    },
    {
      action: "curve",
      x1: "0",
      y1: "h*0.36",
      x2: "w",
      y2: "h*0.36",
      x: "w",
      y: "h*0.20"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.26"
    },
    {
      action: "curve",
      x1: "w",
      y1: "h*0.42",
      x2: "0",
      y2: "h*0.42",
      x: "0",
      y: "h*0.26"
    },
    {
      action: "curve",
      x1: "0",
      y1: "h*0.42",
      x2: "w",
      y2: "h*0.42",
      x: "w",
      y: "h*0.26"
    },
    {
      action: "close"
    }]
  },
  {
    fillStyle: {
      type: "none"
    },
    lineStyle: {
      lineWidth: 0
    },
    actions: [{
      action: "move",
      x: "0",
      y: "h*0.1"
    },
    {
      action: "quadraticCurve",
      x1: "w*0.5",
      y1: "-h*0.1",
      x: "w",
      y: "h*0.1"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.9"
    },
    {
      action: "quadraticCurve",
      x1: "w*0.5",
      y1: "h*1.1",
      x: "0",
      y: "h*0.9"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.1"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "conversation",
  title: "对话",
  category: "bpmn",
  groupName: "conversation",
  props: {
    w: 50,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: [{
      action: "move",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "close"
    }]
  }]
});
function drawChoreographyIcon(a, d, c) {
  var f = [{
    actions: [{
      action: "move",
      x: 0,
      y: 4
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: 0,
      x: 4,
      y: 0
    },
    {
      action: "line",
      x: a - 4,
      y: 0
    },
    {
      action: "quadraticCurve",
      x1: a,
      y1: 0,
      x: a,
      y: 4
    },
    {
      action: "line",
      x: a,
      y: d - 4
    },
    {
      action: "quadraticCurve",
      x1: a,
      y1: d,
      x: a - 4,
      y: d
    },
    {
      action: "line",
      x: 4,
      y: d
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: d,
      x: 0,
      y: d - 4
    },
    {
      action: "line",
      x: 0,
      y: 4
    },
    {
      action: "close"
    }]
  },
  {
    actions: [{
      action: "move",
      x: 0,
      y: 4
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: 0,
      x: 4,
      y: 0
    },
    {
      action: "line",
      x: a - 4,
      y: 0
    },
    {
      action: "quadraticCurve",
      x1: a,
      y1: 0,
      x: a,
      y: 4
    },
    {
      action: "line",
      x: a,
      y: 5
    },
    {
      action: "line",
      x: 0,
      y: 5
    },
    {
      action: "line",
      x: 0,
      y: 4
    },
    {
      action: "close"
    }]
  },
  {
    fillStyle: {
      color: "194,194,194"
    },
    actions: [{
      action: "move",
      x: 0,
      y: d - 5
    },
    {
      action: "line",
      x: a,
      y: d - 5
    },
    {
      action: "line",
      x: a,
      y: d - 4
    },
    {
      action: "quadraticCurve",
      x1: a,
      y1: d,
      x: a - 4,
      y: d
    },
    {
      action: "line",
      x: 4,
      y: d
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: d,
      x: 0,
      y: d - 4
    },
    {
      action: "close"
    }]
  }];
  if (c) {
    for (var b = 0; b < f.length; b++) {
      var e = f[b];
      e.lineStyle = {
        lineWidth: 3
      }
    }
  }
  return f
}
function createParticipant(b) {
  var e = "participantA";
  var a = "participantB";
  if (b.name == "callChoreographyGlobal" || b.name == "callChoreography") {
    e = "callParticipantA";
    a = "callParticipantB"
  }
  var d = Model.create(e, b.props.x, b.props.y);
  d.props.w = b.props.w;
  d.props.zindex = b.props.zindex + 0.5;
  d.parent = b.id;
  Designer.painter.renderShape(d);
  var c = Model.create(a, b.props.x, b.props.y);
  c.props.w = b.props.w;
  c.props.y = b.props.y + b.props.h - c.props.h;
  c.props.zindex = b.props.zindex + 0.5;
  c.parent = b.id;
  Designer.painter.renderShape(c);
  b.children = [d.id, c.id];
  Model.addMulti([d, c])
}
Schema.addShape({
  name: "choreographyTask",
  title: "编排任务",
  text: "编排任务",
  category: "bpmn",
  groupName: "choreographyTask",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "实例化多例序列", "实例化多例并行"]
  },
  {
    name: "实例化参与者",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    markerOffset: 30,
    rotatable: false
  },
  props: {
    w: 120,
    h: 120
  },
  textBlock: {
    x: 5,
    y: "30",
    w: "w-10",
    h: "h-60"
  },
  path: [{
    actions: {
      ref: "choreography_task"
    }
  }],
  drawIcon: function(a, b) {
    return drawChoreographyIcon(a, b, false)
  },
  onCreated: function() {
    createParticipant(this)
  }
});
Schema.addShape({
  name: "participantA",
  title: "参与者 A",
  text: "参与者 A",
  category: "bpmn",
  dataAttributes: [{
    name: "多重参与者",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "最大值",
    type: "string",
    value: "1",
    category: "default"
  },
  {
    name: "参与者绑定类型",
    type: "string",
    value: "top_initiating",
    category: "default"
  }],
  attribute: {
    linkable: false,
    rotatable: false,
    visible: false
  },
  props: {
    w: 150,
    h: 25
  },
  resizeDir: [],
  anchors: [],
  textBlock: {
    x: 5,
    y: 0,
    w: "w-10",
    h: "h"
  },
  path: [{
    actions: [{
      action: "move",
      x: 0,
      y: 6
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: 0,
      x: 6,
      y: 0
    },
    {
      action: "line",
      x: "w-6",
      y: 0
    },
    {
      action: "quadraticCurve",
      x1: "w",
      y1: 0,
      x: "w",
      y: 6
    },
    {
      action: "line",
      x: "w",
      y: "h"
    },
    {
      action: "line",
      x: 0,
      y: "h"
    },
    {
      action: "line",
      x: 0,
      y: 6
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "participantB",
  title: "参与者 B",
  text: "参与者 B",
  category: "bpmn",
  dataAttributes: [{
    name: "多重参与者",
    type: "string",
    value: "set",
    category: "default"
  },
  {
    name: "最大值",
    type: "string",
    value: "1",
    category: "default"
  },
  {
    name: "参与者绑定类型",
    type: "string",
    value: "bottom_non_initiating",
    category: "default"
  }],
  attribute: {
    linkable: false,
    rotatable: false,
    visible: false
  },
  props: {
    w: 150,
    h: 25
  },
  resizeDir: [],
  anchors: [],
  textBlock: {
    x: 5,
    y: 0,
    w: "w-10",
    h: "h"
  },
  fillStyle: {
    color: "194,194,194"
  },
  path: [{
    actions: [{
      action: "move",
      x: 0,
      y: 0
    },
    {
      action: "line",
      x: "w",
      y: 0
    },
    {
      action: "line",
      x: "w",
      y: "h-6"
    },
    {
      action: "quadraticCurve",
      x1: "w",
      y1: "h",
      x: "w-6",
      y: "h"
    },
    {
      action: "line",
      x: 6,
      y: "h"
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: "h",
      x: 0,
      y: "h-6"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "callParticipantA",
  title: "参与者 A",
  text: "参与者 A",
  category: "bpmn",
  dataAttributes: [{
    name: "多重参与者",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "最大值",
    type: "string",
    value: "1",
    category: "default"
  },
  {
    name: "参与者绑定类型",
    type: "string",
    value: "top_initiating",
    category: "default"
  }],
  attribute: {
    linkable: false,
    rotatable: false,
    visible: false
  },
  props: {
    w: 150,
    h: 25
  },
  resizeDir: [],
  anchors: [],
  textBlock: {
    x: 5,
    y: 0,
    w: "w-10",
    h: "h"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth+ 2"
    },
    actions: [{
      action: "move",
      x: 0,
      y: 6
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: 0,
      x: 6,
      y: 0
    },
    {
      action: "line",
      x: "w-6",
      y: 0
    },
    {
      action: "quadraticCurve",
      x1: "w",
      y1: 0,
      x: "w",
      y: 6
    },
    {
      action: "line",
      x: "w",
      y: "h"
    },
    {
      action: "line",
      x: 0,
      y: "h"
    },
    {
      action: "line",
      x: 0,
      y: 6
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "callParticipantB",
  title: "参与者 B",
  text: "参与者 B",
  category: "bpmn",
  dataAttributes: [{
    name: "多重参与者",
    type: "string",
    value: "set",
    category: "default"
  },
  {
    name: "最大值",
    type: "string",
    value: "1",
    category: "default"
  },
  {
    name: "参与者绑定类型",
    type: "string",
    value: "bottom_non_initiating",
    category: "default"
  }],
  attribute: {
    linkable: false,
    rotatable: false,
    visible: false
  },
  props: {
    w: 150,
    h: 25
  },
  resizeDir: [],
  anchors: [],
  textBlock: {
    x: 5,
    y: 0,
    w: "w-10",
    h: "h"
  },
  fillStyle: {
    color: "194,194,194"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth+ 2"
    },
    actions: [{
      action: "move",
      x: 0,
      y: 0
    },
    {
      action: "line",
      x: "w",
      y: 0
    },
    {
      action: "line",
      x: "w",
      y: "h-6"
    },
    {
      action: "quadraticCurve",
      x1: "w",
      y1: "h",
      x: "w-6",
      y: "h"
    },
    {
      action: "line",
      x: 6,
      y: "h"
    },
    {
      action: "quadraticCurve",
      x1: 0,
      y1: "h",
      x: 0,
      y: "h-6"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "message",
  title: "消息",
  category: "bpmn",
  props: {
    w: 60,
    h: 40
  },
  path: [{
    actions: {
      ref: "rectangle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: [{
      action: "move",
      x: "0",
      y: "0"
    },
    {
      action: "line",
      x: "w*0.5",
      y: "h*0.5"
    },
    {
      action: "move",
      x: "w",
      y: "0"
    },
    {
      action: "line",
      x: "w*0.5",
      y: "h*0.5"
    }]
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "rectangle"
    }
  }]
});
Schema.addShape({
  name: "messageStartEvent",
  title: "可中断消息事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "message0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "timerStartEvent",
  title: "可中断时间事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_needle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_num"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "conditionalStartEvent",
  title: "可中断条件事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "条件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "conditional0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalStartEvent",
  title: "可中断信号事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationStartEvent",
  title: "可中断上升事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "compensationStartEvent",
  title: "可中断补偿事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "compensation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "errorStartEvent",
  title: "可中断错误事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "error0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleStartEvent",
  title: "可中断多例事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "parallelStartEvent",
  title: "可中断并行事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "messageNonInturruptingEvent",
  title: "非中断消息事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "message0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "timerNonInturruptingEvent",
  title: "非中断时间事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_needle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_num"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationNonInturruptingEvent",
  title: "非中断上升事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "conditionalNonInturruptingEvent",
  title: "非中断条件事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "条件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "conditional0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalNonInturruptingEvent",
  title: "非中断信号事件",
  category: "bpmn",
  groupName: "startEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleNonInturruptingEvent",
  title: "非中断多例事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "parallelNonInturruptingEvent",
  title: "非中断并行事件",
  category: "bpmn",
  groupName: "startEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: 2,
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "messageIntermediateCatchEvent",
  title: "捕获消息事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "message0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "timerIntermediateCatchEvent",
  title: "捕获时间事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_needle"
    }
  },
  {
    lineStyle: {
      lineWidth: 2,
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_num"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationIntermediateCatchEvent",
  title: "捕获上升事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "conditionalIntermediateCatchEvent",
  title: "捕获条件事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  dataAttributes: [{
    name: "条件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "conditional0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "linkIntermediateCatchEvent",
  title: "捕获连接事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "link3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalIntermediateCatchEvent",
  title: "捕获信号事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleIntermediateCatchEvent",
  title: "捕获多例事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "parallelIntermediateCatchEvent",
  title: "捕获并行事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "compensationIntermediateCatchEvent",
  title: "捕获补偿事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "compensation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "errorIntermediateCatchEvent",
  title: "捕获错误事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "error0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "cancelIntermediateCatchEvent",
  title: "捕获取消事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "cancel3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "messageIntermediateThrowingEvent",
  title: "抛出消息事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "255,255,255",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "message4"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "255,255,255",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "message4_0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationIntermediateThrowingEvent",
  title: "抛出上升事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "linkIntermediateThrowingEvent",
  title: "抛出连接事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "link3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "compensationIntermediateThrowingEvent",
  title: "抛出补偿事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "compensation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalIntermediateThrowingEvent",
  title: "抛出信号事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleIntermediateThrowingEvent",
  title: "抛出多例事件",
  category: "bpmn",
  groupName: "intermediateEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "messageBoundaryInturrputingEvent",
  title: "绑定消息事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "message0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "timerBoundaryInturrputingEvent",
  title: "绑定时间事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_needle"
    }
  },
  {
    lineStyle: {
      lineWidth: 2,
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_num"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationBoundaryInturrputingEvent",
  title: "绑定上升事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "conditionalBoundaryInturrputingEvent",
  title: "绑定条件事件",
  dataAttributes: [{
    name: "条件",
    type: "string",
    value: "",
    category: "default"
  }],
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "conditional0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalBoundaryInturrputingEvent",
  title: "绑定信号事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleBoundaryInturrputingEvent",
  title: "绑定多例事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "parallelBoundaryInturrputingEvent",
  title: "绑定并行事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "compensationBoundaryInturrputingEvent",
  title: "绑定补偿事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "compensation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "errorBoundaryInturrputingEvent",
  title: "绑定错误事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "error0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "cancelBoundaryInturrputingEvent",
  title: "绑定取消事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "cancel3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "boundaryNonInturrputingEvent",
  title: "非中断绑定事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  }]
});
Schema.addShape({
  name: "messageBoundaryNonInturruptingEvent",
  title: "非中断绑定消息事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "message0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "timerBoundaryNonInturruptingEvent",
  title: "非中断绑定时间事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_needle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "timer0_num"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalationBoundaryNonInturruptingEvent",
  title: "非中断绑定上升事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "conditionalBoundaryNonInturruptingEvent",
  title: "非中断绑定条件事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  dataAttributes: [{
    name: "条件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "conditional0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalBoundaryNonInturruptingEvent",
  title: "非中断绑定信号事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleBoundaryNonInturruptingEvent",
  title: "非中断绑定多例事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  dataAttributes: [{
    name: "多例并行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "parallelBoundaryNonInturruptingEvent",
  title: "非中断绑定并行事件",
  category: "bpmn",
  groupName: "boundaryEvent",
  dataAttributes: [{
    name: "多例并行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineStyle: "dashed"
    },
    actions: {
      ref: "inneround"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "messageEndEvent",
  title: "结束消息事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "255,255,255",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "message4"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "255,255,255",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "message4_0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "escalatEndEvent",
  title: "结束上升事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "escalation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "cancelEndEvent",
  title: "结束取消事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "cancel3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "errorEndEvent",
  title: "结束错误事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "error0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "compensationEndEvent",
  title: "结束补偿事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "compensation0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "signalEndEvent",
  title: "结束信号事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "signal0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "multipleEndEvent",
  title: "结束多例事件",
  category: "bpmn",
  groupName: "endEvent",
  dataAttributes: [{
    name: "定义事件",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "multiple0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "terminate",
  title: "终止事件",
  category: "bpmn",
  groupName: "endEvent",
  props: {
    w: 40,
    h: 40
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2",
      lineStyle: "solid"
    },
    actions: {
      ref: "round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "g_round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "round"
    }
  }]
});
Schema.addShape({
  name: "manualTask",
  title: "人工任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "255,255,255"
    },
    actions: {
      ref: "manual_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "receiveTask",
  title: "接收任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "255,255,255"
    },
    actions: {
      ref: "receive_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "sendTask",
  title: "发送任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "255,255,255",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "0,0,0"
    },
    actions: {
      ref: "receive_task_dark"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "serviceTask",
  title: "服务任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "执行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "操作",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "service_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "scriptTask",
  title: "脚本任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "script_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "businessRuleTask",
  title: "业务规则任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "business_rule"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "userTask",
  title: "用户任务",
  text: "",
  category: "bpmn",
  groupName: "task",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "渲染",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "执行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "255,255,255"
    },
    actions: {
      ref: "user_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "manualCallActivity",
  title: "人工活动",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  ],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "255,255,255"
    },
    actions: {
      ref: "manual_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "scriptCallActivity",
  title: "脚本活动",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  ],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "script_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "businessRuleCallActivity",
  title: "业务规则活动",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  ],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "business_rule"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "userCallActivity",
  title: "用户活动",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "渲染",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "执行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 1,
      lineColor: "50,50,50",
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "user_task"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "callActivityCallProcess",
  title: "回调全局流程",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "渲染",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "执行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    container: true,
    markers: ["expand"]
  },
  props: {
    w: 100,
    h: 70
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "callActivityCallProcessExpanded",
  title: "回调全局流程(展开)",
  text: "",
  category: "bpmn",
  groupName: "callActivity",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "渲染",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "执行",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 200,
    h: 140
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "expandedSubProcess",
  title: "子流程(扩展)",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "多例"]
  },
  {
    name: "是否为序列",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "是否为补偿",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "资源 ",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "开始令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "结束令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 200,
    h: 140
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "adHocSubProcess",
  title: "即席子流程",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  attribute: {
    container: true,
    markers: ["expand", "ad_hoc"]
  },
  props: {
    w: 100,
    h: 70
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "expandedAdHoc",
  title: "即席子流程(扩展)",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  dataAttributes: [{
    name: "开始令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "结束令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    container: true,
    markers: ["ad_hoc"]
  },
  props: {
    w: 200,
    h: 140
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "transactionSubProcess",
  title: "事物子流程",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  attribute: {
    container: true,
    markers: ["expand"]
  },
  props: {
    w: 100,
    h: 70
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "inner_roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "expandedTransaction",
  title: "事物子流程(扩展)",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  dataAttributes: [{
    name: "开始令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "结束令牌",
    type: "number",
    value: "1",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "IO声明",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输入集合",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "数据输出集合",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 200,
    h: 140
  },
  path: [{
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "roundRectangle"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "inner_roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "ebSubProcess",
  title: "事件子流程",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  attribute: {
    container: true,
    markers: ["expand"]
  },
  lineStyle: {
    lineStyle: "dashed"
  },
  props: {
    w: 100,
    h: 70
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "expandedEBSubProcess",
  title: "事件子流程(扩展)",
  text: "",
  category: "bpmn",
  groupName: "subProcess",
  lineStyle: {
    lineStyle: "dashed"
  },
  props: {
    w: 200,
    h: 140
  },
  path: [{
    actions: {
      ref: "roundRectangle"
    }
  }]
});
Schema.addShape({
  name: "exclusiveGateway",
  title: "互斥网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: [{
      action: "move",
      x: "w*0.5 + w*0.5*0.4 - w*0.02",
      y: "h*0.5 - h*0.5*0.4 - h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 - w*0.5*0.4 - w*0.02",
      y: "h*0.5 + h*0.5*0.4 - h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 - w*0.5*0.4 + w*0.02",
      y: "h*0.5 + h*0.5*0.4 + h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 + w*0.5*0.4 + w*0.02",
      y: "h*0.5 - h*0.5*0.4 + h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 + w*0.5*0.4 - w*0.02",
      y: "h*0.5 - h*0.5*0.4 - h*0.02"
    },
    {
      action: "close"
    }]
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: [{
      action: "move",
      x: "w*0.5",
      y: "h*0.5"
    },
    {
      action: "move",
      x: "w*0.5 - w*0.5*0.4 + w*0.02",
      y: "h*0.5 - h*0.5*0.4 - h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 + w*0.5*0.4 + w*0.02",
      y: "h*0.5 + h*0.5*0.4 - h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 + w*0.5*0.4 - w*0.02",
      y: "h*0.5 + h*0.5*0.4 + h*0.02"
    },
    {
      action: "line",
      x: "w*0.5 - w*0.5*0.4 - w*0.02",
      y: "h*0.5 - h*0.5*0.4 + h*0.02"
    },
    {
      action: "close"
    }]
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "inclusiveGateway",
  title: "相容网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "g_round"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "complexGateway",
  title: "复杂网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "激活条件",
    type: "string",
    value: "",
    category: "default"
  },
  {
    name: "激活令牌",
    type: "number",
    value: "",
    category: "default"
  },
  {
    name: "等待开始",
    type: "boolean",
    value: "true",
    category: "default"
  },
  {
    name: "缺省",
    type: "string",
    value: "",
    category: "default"
  },
  ],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "complex_gateway0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "complex_gateway1"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "complex_gateway2"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "complex_gateway3"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "eventBasedGateway",
  title: "事件网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "实例化",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "event_based_gateway"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "eventBasedStartGateway",
  title: "实例化事件网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "实例化",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "event_based_start_gateway"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "parallelGateway",
  title: "并行网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  ],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineWidth: 0,
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "parallel_gateway"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "parallelEBGateway",
  title: "实例化并行网关",
  category: "bpmn",
  groupName: "bpmnGateway",
  dataAttributes: [{
    name: "网关方向",
    type: "list",
    value: "",
    category: "default",
    listItems: ["未声明", "聚集(多输入流，单输出流)", "分支(多输出流，单输入流)", "混合"]
  },
  {
    name: "实例化",
    type: "boolean",
    value: "false",
    category: "default"
  }],
  props: {
    w: 50,
    h: 50
  },
  textBlock: {
    x: "w/2-60",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: {
      ref: "gateway0"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "g_round"
    }
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "parallel_eventbased_gateway"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "gateway0"
    }
  }]
});
Schema.addShape({
  name: "dataInObject",
  title: "输入数据对象",
  text: "",
  category: "bpmn",
  groupName: "dataObject",
  dataAttributes: [{
    name: "是否为集合",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "主题引用项",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 90,
    h: 120
  },
  path: [{
    actions: [{
      action: "move",
      x: "0",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "0"
    },
    {
      action: "close"
    }]
  },
  {
    actions: [{
      action: "move",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    }]
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    actions: {
      ref: "data_in_object"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "rectangle"
    }
  }]
});
Schema.addShape({
  name: "dataOutObject",
  title: "输出数据对象",
  text: "",
  category: "bpmn",
  groupName: "dataObject",
  dataAttributes: [{
    name: "是否为集合",
    type: "boolean",
    value: "false",
    category: "default"
  },
  {
    name: "主题引用项",
    type: "string",
    value: "",
    category: "default"
  }],
  props: {
    w: 90,
    h: 120
  },
  path: [{
    actions: [{
      action: "move",
      x: "0",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "0",
      y: "0"
    },
    {
      action: "close"
    }]
  },
  {
    actions: [{
      action: "move",
      x: "w*2/3",
      y: "0"
    },
    {
      action: "line",
      x: "w*2/3",
      y: "h*0.25"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.25"
    }]
  },
  {
    lineStyle: {
      lineStyle: "solid"
    },
    fillStyle: {
      type: "solid",
      color: "50,50,50"
    },
    actions: {
      ref: "data_in_object"
    }
  },
  {
    lineStyle: {
      lineWidth: 0
    },
    fillStyle: {
      type: "none"
    },
    actions: {
      ref: "rectangle"
    }
  }]
});
Schema.addShape({
  name: "subConversation",
  title: "子对话",
  category: "bpmn",
  groupName: "conversation",
  attribute: {
    container: true,
    markers: ["expand"]
  },
  props: {
    w: 80,
    h: 70
  },
  textBlock: {
    x: "w/2-65",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    actions: [{
      action: "move",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "callConversation",
  title: "回调对话(全局)",
  category: "bpmn",
  groupName: "conversation",
  props: {
    w: 80,
    h: 70
  },
  textBlock: {
    x: "w/2-65",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: [{
      action: "move",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "callCollabConversation",
  title: "回调对话(协作)",
  category: "bpmn",
  groupName: "conversation",
  attribute: {
    container: true,
    markers: ["expand"]
  },
  props: {
    w: 80,
    h: 70
  },
  textBlock: {
    x: "w/2-65",
    y: "h",
    w: "120",
    h: "30"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth + 2"
    },
    actions: [{
      action: "move",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "line",
      x: "w",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "w-Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "h"
    },
    {
      action: "line",
      x: "0",
      y: "h*0.5"
    },
    {
      action: "line",
      x: "Math.min(w,h)*0.21",
      y: "0"
    },
    {
      action: "close"
    }]
  }]
});
Schema.addShape({
  name: "subChoreography",
  title: "子编排任务",
  text: "子编排任务",
  category: "bpmn",
  groupName: "choreographyTask",
  dataAttributes: [{
    name: "实例化参与者",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    markers: ["expand"],
    markerOffset: 30,
    rotatable: false
  },
  props: {
    w: 120,
    h: 120
  },
  textBlock: {
    x: 5,
    y: "30",
    w: "w-10",
    h: "h-60"
  },
  path: [{
    actions: {
      ref: "choreography_task"
    }
  }],
  drawIcon: function(a, b) {
    return drawChoreographyIcon(a, b, false)
  },
  onCreated: function() {
    createParticipant(this)
  }
});
Schema.addShape({
  name: "callChoreographyGlobal",
  title: "回调编排任务(全局)",
  text: "",
  category: "bpmn",
  groupName: "choreographyTask",
  dataAttributes: [{
    name: "循环类型",
    type: "list",
    value: "",
    category: "default",
    listItems: ["", "标准", "实例化多例序列", "实例化多例并行"]
  },
  {
    name: "实例化参与者",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    markerOffset: 30,
    rotatable: false
  },
  props: {
    w: 120,
    h: 120
  },
  textBlock: {
    x: 5,
    y: "30",
    w: "w-10",
    h: "h-60"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth+ 2"
    },
    actions: {
      ref: "choreography_task"
    }
  }],
  drawIcon: function(a, b) {
    return drawChoreographyIcon(a, b, true)
  },
  onCreated: function() {
    createParticipant(this)
  }
});
Schema.addShape({
  name: "callChoreography",
  title: "回调编排任务(编排)",
  text: "",
  category: "bpmn",
  groupName: "choreographyTask",
  dataAttributes: [{
    name: "实例化参与者",
    type: "string",
    value: "",
    category: "default"
  }],
  attribute: {
    markers: ["expand"],
    markerOffset: 30,
    rotatable: false
  },
  props: {
    w: 120,
    h: 120
  },
  textBlock: {
    x: 5,
    y: "30",
    w: "w-10",
    h: "h-60"
  },
  path: [{
    lineStyle: {
      lineWidth: "lineWidth+ 2"
    },
    actions: {
      ref: "choreography_task"
    }
  }],
  drawIcon: function(a, b) {
    return drawChoreographyIcon(a, b, true)
  },
  onCreated: function() {
    createParticipant(this)
  }
});